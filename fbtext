#!/usr/bin/python3
# Write UTF-8 text to frame buffer, works with python 2 or 3

import os, sys, getopt, fb, screen

usage = """
Usage:

    fbtext [options] [file.txt]

Write arbitrary text from file or stdin to frame buffer.

Options are:

    -b width                - screen border width, default is 0 (no border)
    -c [fg][:bg]            - foreground and background colors, default is "white:black"
    -d device               - framebuffer device, default is "/dev/fb0"
    -f path/to/font         - path to font
    -g direction            - text gravity, one of "nw", "n", "ne", "w", "c", "e", "sw", "s", or "se", default is "nw"
    -m                      - text margin in pixels, default is 10
    -s point                - font point size, default is 20
    -w                      - don't wrap text to fit
    -x                      - don't clip text to fit (may render partial characters)

Font names "m" and "p" will select built-in monospaced or proportional fonts.
The default font is "m".

-w and -x should be avoided with proportional fonts.

If the file not specified then read text from stdin.
"""

__here__ = os.path.dirname(__file__) or '.'

# set defaults
bg = "black"
fg = "white"
gravity = "nw"
point = 20
font = None
device = "/dev/fb0"
margin = 10
border = 0
wrap = True
clip = True

try:
    opts, args = getopt.getopt(sys.argv[1:],"b:c:d:f:g:m:s:wx")

    for opt, arg in opts:
        if   opt == "-b": border = int(arg)
        elif opt == "-c":
            fg, bg = (arg.lower()+":").split(":")[:2]
            if bg == '': bg = "black"
        elif opt == "-d": device = arg
        elif opt == "-f": font = arg
        elif opt == "-g": gravity = arg.lower()
        elif opt == "-m": margin = int(arg)
        elif opt == "-s": point = int(arg)
        elif opt == "-w": wrap = not wrap
        elif opt == "-x": clip = not wrap
        else: raise Exception("Invalid option '%s'" % opt)

    if not font or font[:1] == "m": font = __here__+"/WenQuanYiMicroHeiMono.ttf"
    elif font[:1] == "p": font=__here__+"/WenQuanYiMicroHei.ttf"
    if not os.path.isfile(font): raise Exception("Can't find font %s" % font)

except Exception as e:
    print (str(e),"\n",usage,file = sys.stderr)
    quit(1)

if not args or args[0] == '-':
    # read text from stdin (it's in binary mode)
    text = str(sys.stdin.buffer.read(),"utf8")
else:
    # read text from file
    with open(args[0]) as fh: text=fh.read()

# Open the fremebuffer
fb = fb.framebuffer(device)

# Init the screen
screen = screen.screen(width=fb.width, height=fb.height, fg=fg, bg=bg)

# maybe put a border
if border:
    screen.border(border)
    margin += border

# add the text
screen.text(text, left=margin, top=margin, right=-margin, bottom=-margin, gravity=gravity, wrap=wrap, clip=clip, point=point, font=font)

# update the framebuffer
fb.pack(screen.rgb())
