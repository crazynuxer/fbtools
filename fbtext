#!/usr/bin/python2
# DO NOT REMOVE THIS LINE - coding: utf-8
# Write UTF-8 text on stdin to frame buffer
from __future__ import print_function
import os, sys, fcntl, mmap, getopt
from pgmagick import *
import fb

bg="black"
fg="white"
gravity="nw"
point=20
font=sys.path[0]+"/WenQuanYiMicroHeiMono.ttf"
device="/dev/fb0"
margin=10
border=0
wrap=False
xtrim=False
ytrim=False
debug=False
reference='M'

try:

    opts, args = getopt.getopt(sys.argv[1:],"b:c:d:f:g:m:r:s:wxyz")
    if len(args): raise Exception("Unexpected argument: "+" ".join(args))
    for opt, arg in opts:
        if   opt == "-b": border=int(arg)
        elif opt == "-c":
            colors=arg.lower().split(":",2)
            f,b=(arg.lower().split(":",1)+[''])[0:2]
            if f: fg=f
            if b: bg=b
        elif opt == "-d": device=arg
        elif opt == "-f":
            font=arg
            if not os.path.isfile(font):
                raise Exception("No such file '%s'" % font)
        elif opt == "-g":
            gravity=arg.lower()
            if not gravity in ("nw","n","ne","w","c","e","sw","s","se"):
                raise Exception("Invalid gravity '%s'" % gravity)
        elif opt == "-m": margin=int(arg)
        elif opt == "-r": reference=arg
        elif opt == "-s": point=int(arg)
        elif opt == "-w": wrap=True
        elif opt == "-x": xtrim=True
        elif opt == "-y": ytrim=True
        elif opt == "-z": debug=True
        else: raise Exception("Invalid option '%s'" % opt)

except Exception as e:

    print (str(e),"""

Usage:

    echo "Arbitrary text" | fbtext [options]

Write arbitrary, possibly multi-line text to frame buffer. Options are:

    -b width                - screen border width, default is "0" (no border)
    -c color:color          - text color, as "foreground:background", default is "white:black"
    -d device               - framebuffer device, default is "/dev/fb0"
    -f path/to/font         - specify font, default is "WenQuanYiMicroHeiMono.ttf"
    -g direction            - text gravity, one of "nw", "n", "ne", "w", "c", "e", "sw", "s", or "se", default is "nw"
    -m                      - text margin in pixels, default is "10"
    -r char                 - reference character, default is "M"
    -s point                - font point size, default is "20"
    -w                      - wrap text to page width
    -x                      - trim text to page width
    -y                      - trim text to page height

Note -w, -x, and -y operations are based on size of reference character
specified by -r, best results are with a monospaced font.

""", file=sys.stderr)

    quit(1)

# open framebuffer first so we can get its geometry
fb=fb.framebuffer(device)
if debug: print("fbheight=%d fbwidth=%d" % (fb.height, fb.width))

# create surface
im=Image(Geometry(fb.width,fb.height),Color(bg))
im.fillColor(Color(fg))
im.strokeWidth(0)
im.depth(8)
im.font(font)
im.fontPointsize(point)

if border == 1:
    im.draw(DrawableLine(0, 0, fb.width-1, 0)) # across the top
    im.draw(DrawableLine(0, 0, 0, fb.height-1)) # down the left
    im.draw(DrawableLine(fb.width-1, 0, fb.width-1, fb.height-1)) # down the right
    im.draw(DrawableLine(0, fb.height-1, fb.width-1, fb.height-1)) # across the bottom
elif border > 0:
    im.draw(DrawableRectangle(0, 0, fb.width-1, border-1)) # across the top
    im.draw(DrawableRectangle(0, 0, border-1, fb.height-1)) # down the left
    im.draw(DrawableRectangle(fb.width-border, 0, fb.width-1, fb.height-1)) # down the right
    im.draw(DrawableRectangle(0, fb.height-border, fb.width-1, fb.height-1)) # across the bottom

margin += border

# get font infp
tm=TypeMetric()
im.fontTypeMetrics(reference,tm)
if debug: 
    print("reference=%s: ascent=%d descent=%d textheight=%d textwidth=%d maxadvance=%d" % 
          (reference, tm.ascent(),tm.descent(),tm.textHeight(),tm.textWidth(), tm.maxHorizontalAdvance()))

# x and y margins are based on gravity
if gravity in ("nw","ne","w","e","sw","se"):
    xoffset=margin
else:
    xoffset=0

if gravity in ("nw","n","ne"):
    yoffset=margin+tm.ascent()
elif gravity in ("sw","s","se"):
    yoffset=margin+(-tm.descent())
else:
    yoffset=0

maxcols=int((fb.width-(margin*2))/tm.textWidth())
maxlines=int((fb.height-(margin*2))/(tm.textHeight()+1))
if debug: print("xoffset=%d yoffset=%d maxcols=%d maxlines=%d" % (xoffset, yoffset, maxcols, maxlines))

# suck up utf-8 text
text=sys.stdin.read().decode("utf8").rstrip("\n")

if wrap:
    text=reduce(lambda line,word: line+(' ' if (len(line)-line.rfind('\n') + len(word.split('\n',1)[0]) <= maxcols) else '\n')+word, text.split(' '))

if xtrim:
    text = "\n".join(map(lambda s:s[0:maxcols],text.split("\n")))

if ytrim:
    text = "\n".join(text.split("\n",maxlines+1)[0:maxlines])

dl=DrawableList()
dl.append(DrawableGravity({"nw": GravityType.NorthWestGravity,
                           "n":  GravityType.NorthGravity,
                           "ne": GravityType.NorthEastGravity,
                           "w":  GravityType.WestGravity,
                           "c":  GravityType.CenterGravity,
                           "e":  GravityType.EastGravity,
                           "sw": GravityType.SouthWestGravity,
                           "s":  GravityType.SouthGravity,
                           "se": GravityType.SouthEastGravity}[gravity]))
dl.append(DrawableText(xoffset, yoffset, text.encode("utf8")))
im.draw(dl)

blob=Blob()
im.write(blob,"RGB")
fb.pack(blob.data)

