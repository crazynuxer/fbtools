#!/usr/bin/python2
# Write text to frame buffer
from __future__ import print_function
import os, sys, fcntl, mmap, getopt
from pgmagick import Image, Geometry, Color, GravityType, DrawableList, DrawableGravity, DrawableText, Blob, TypeMetric
import fb

bg="black"
fg="white"
gravity="nw"
point=20
font=sys.path[0]+"/monospace.ttf"
device="/dev/fb0"
margin=10
wrap=False
truncate=False
debug=False

try:
    
    opts, args = getopt.getopt(sys.argv[1:],"b:d:f:g:m:pP:s:twz")
    if len(args): raise Exception("Unexpected argument: "+" ".join(args))
    for opt, arg in opts:
        if   opt == "-b": bg=Color(arg.lower())
        elif opt == "-d": device=arg
        elif opt == "-f": fg=Color(arg.lower())
        elif opt == "-g": 
            gravity=arg.lower()
            if not gravity in ("nw","n","ne","w","c","e","sw","s","se"): 
                raise Exception("Invalid gravity '%s'" % gravity)
        elif opt == "-m": margin=int(arg)
        elif opt == "-p": font=sys.path[0]+"/proportional.ttf"
        elif opt == "-P": 
            font=arg
            if not os.path.isfile(font):
                raise Exception("No such file '%s'" % font)
        elif opt == "-s": point=int(arg)
        elif opt == "-t": truncate=True
        elif opt == "-w": wrap=True
        elif opt == "-z": debug=True
        else: raise Exception("Invalid option '%s'" % opt)

except Exception as e:

    print (str(e),"""
    
Usage:

    echo "Arbitrary text" | fbtext [options]

Write arbitrary, possibly multi-line text to frame buffer. Options are:

    -b color                - background color, as a name or in #XXXXXX notation, default is "black"
    -d device               - framebuffer device, default is "/dev/fb0" 
    -f color                - foreground color, default is "white"
    -g direction            - page gravity, one of "nw", "n", "ne", "w", "c", "e", "sw", "s", or "se", default is "nw"
    -m                      - text margin in pixels, default is 10
    -p                      - use proportional font, default is monospaced
    -P path/to/font         - specify a path to a font
    -s point                - font point size, default is 20
    -t                      - truncate text to fit height
    -w                      - wrap text to fit width (only makes sense for monospaced fonts)
""", file=sys.stderr)

    quit(1)

# open framebuffer first so we can get its geometry
fb=fb.framebuffer(device)        
if debug: print("fbheight=%d fbwidth=%d" % (fb.height, fb.width))

# create surface
im=Image(Geometry(fb.width,fb.height),bg)
im.fillColor(fg);
im.strokeColor(Color("transparent"))
im.depth(8)
im.font(font)
im.fontPointsize(point)

# get font infp
tm=TypeMetric()
im.fontTypeMetrics("W",tm)
if debug: print("ascent=%d descent=%d textheight=%d textwidth=%d" % (tm.ascent(),tm.descent(),tm.textHeight(),tm.textWidth()))

# x and y margins are based on gravity
if gravity in ("nw","ne","w","e","sw","se"): 
    xmargin=margin
else: 
    xmargin=0

if gravity in ("nw","n","ne"): 
    ymargin=margin+tm.ascent()
elif gravity in ("sw","s","se"): 
    ymargin=margin-tm.descent() # note descent is negative
else:
    ymargin=0

maxcols=int((fb.width-(margin*2 if xmargin else 0))/tm.textWidth()) 
maxlines=int((fb.height-(margin*2 if ymargin else 0))/tm.textHeight()) 
if debug: print("xmargin=%d ymargin=%d maxcols=%d maxlines-%d" % (xmargin, ymargin, maxcols, maxlines))

text=sys.stdin.read().rstrip("\n")

if wrap:
    text=reduce(lambda line,word: line+(' ' if (len(line)-line.rfind('\n') + len(word.split('\n',1)[0]) <= maxcols) else '\n')+word, text.split(' '))

if truncate:
    text = "\n".join(text.split("\n",maxlines+1)[0:maxlines])        

dl=DrawableList()
dl.append(DrawableGravity({"nw": GravityType.NorthWestGravity,
                           "n":  GravityType.NorthGravity,
                           "ne": GravityType.NorthEastGravity,
                           "w":  GravityType.WestGravity,
                           "c":  GravityType.CenterGravity,
                           "e":  GravityType.EastGravity,
                           "sw": GravityType.SouthWestGravity,
                           "s":  GravityType.SouthGravity, 
                           "se": GravityType.SouthEastGravity}[gravity]))
dl.append(DrawableText(xmargin, ymargin, text))
im.draw(dl)

blob=Blob()
im.write(blob,"RGB")
fb.pack(blob.data)

