#!/usr/bin/python3
"""
Usage:

    fbimage [options] [image.file]

Decode an image file and output to frame buffer.

Options are:

    -b width                - screen border width, default is 0 (no border)
    -c [fg:]bg              - foreground and background colors, default is "white:black"
    -d device               - framebuffer device, default is "/dev/fb0"
    -m width                - margin width, default is "0" (no margin)
    -s                      - stretch the image to fit

If image.file is not specified then the image will be read from stdin.

If background color is "transparent" then existing framebuffer content will be
overlayed.
"""

# Write an image to frame buffer
import sys, getopt

try:
    import screen               # works if this executable is in the fbtools directory
except ImportError:
    from fbtools import screen  # works if fbtools is installed as a package


fg=None
bg=None
device=None
margin=0
border=0
stretch=False

try:

    opts, args = getopt.getopt(sys.argv[1:],"b:c:d:m:s")
    for opt, arg in opts:
        if   opt == "-b": border = int(arg)
        elif opt == "-c": fg, bg = (i or None for i in ([None]+arg.split(':'))[-2:])
        elif opt == "-d": device = arg
        elif opt == "-m": margin = int(arg)
        elif opt == "-s": stretch = True
    if len(args) > 1: raise Exception("Unexpected argument")
    filename = args[0] if args else "-"

except Exception as e:
    print (str(e), "\n", __doc__, file=sys.stderr)
    quit(1)

margin += border

# Create a screen
screen = screen.Screen(fbdev=device, fg=fg, bg=bg, border=border)

# Load image between margins
screen.child(left=margin, top=margin, right=-margin, bottom=-margin).image(filename, stretch=stretch)

# Update the framebuffer
screen.update()
